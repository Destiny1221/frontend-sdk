{
  "compilerOptions": {
    /* Basic Options */
    // "incremental": true,                   /* TS编译器在第一次编译之后会生成一个存储编译信息的文件，第二次编译会在第一次的基础上进行增量编译，可以提高编译的速度 */
    "target": "ESNEXT" /* 生成js版本: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT(下一版本)'. */,
    "module": "commonjs" /* 生成的module形式: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */,
    "lib": [
      "esnext",
      "DOM"
    ] /* TS需要引用的库，即声明文件，es5默认引用dom、es5、scripthost,如需使用es的高级版本特性，通常需要配置 */,
    // "allowJs": true,                       /* 允许编译器编译Js、JSX文件 */
    // "checkJs": true,                       /* 允许在JS文件中报错，通常与allowJS一起使用 */
    // "jsx": "preserve",                     /* 指定jsx格式: 'preserve', 'react-native', or 'react'. */
    "declaration": true /* 生成声明文件，开启后会自动生成声明文件 */,
    // "declarationMap": true,                /* 为声明文件生成sourceMap */
    "sourceMap": true /* 生成目标文件的sourceMap文件 */,
    // "outFile": "./",                       /* 将代码编译合并成一个文件 */
    "outDir": "./dist" /* 指定编译后文件所在目录 */,
    // "rootDir": "./",                       /* 指定输入文件的根目录 */
    // "composite": true,                     /* 是否开启项目编译 */
    // "tsBuildInfoFile": "./",               /* 增量编译文件的存储位置 */
    // "removeComments": true,                /* 删除注释 */
    // "noEmit": true,                        /* 不输出文件,即编译后不会生成任何js文件 */
    // "importHelpers": true,                 /* 是否将辅助函数从 tslib 模块导入 */
    // "downlevelIteration": true,            /* 是否用于转换为旧版本的JS提供可迭代对象的全面支持*/
    // "isolatedModules": true,               /* 是否将每个文件转换为单独的模块 */
    /* Strict Type-Checking Options */
    // "strict": true,                        /* 是否启动所有严格检查的总开关，开启后将开启所有严格检查选项，默认所有选项都是false */
    "noImplicitAny": true /* 是否禁止隐式的any类型 */,
    // "strictNullChecks": true,              /* 是否启用严格的空检查 */
    // "strictFunctionTypes": true,           /* 是否启用对函数类型的严格检查 */
    // "strictBindCallApply": true,           /* 是否在函数上启用严格的’bind’， 'call’和’apply’方法 */
    // "strictPropertyInitialization": true,  /* 是否启用严格检查类的属性初始化 */
    // "noImplicitThis": true,                /* 是否禁止不明确类型的this */
    // "alwaysStrict": true,                  /* 是否以严格模式解析，并为每个源文件都使用"use strict" */
    /* Additional Checks 附加检查 */
    // "noUnusedLocals": true,                /*是否检查未使用的局部变量 */
    // "noUnusedParameters": true,            /* 是否检查未使用的参数 */
    // "noImplicitReturns": true,             /* 检查函数是否不含有隐式返回值 */
    // "noFallthroughCasesInSwitch": true,    /* 检查switch中是否含有case没有使用break跳出 */
    /* Module Resolution Options */
    "moduleResolution": "node" /* 指定模块解析策略，node或classic */,
    "baseUrl": "./" /*用于解析非绝对模块名的基本目录，相对模块不受影响默认是当前目录 */,
    //   "paths": {
    //     "*": [
    //       "node_modules/*"
    //     ]
    //   },                                   /* 用于设置模块名称基于baseUrl的路径映射关系 */
    // "rootDirs": [],                        /* 将多个目录放在一个虚拟目录下，运行编译后文件引入的位置发生改变，也不会报错 */
    "typeRoots": ["src/@types"] /* 声明文件目录 */,
    // "types": [],                           /* 加载的声明文件包 */
    "allowSyntheticDefaultImports": true /* 是否允许从没有默认导出的模块中默认导入 */,
    "esModuleInterop": true /* 是否通过为所有导入模块创建命名空间对象. */,
    // "preserveSymlinks": true,              /* 是否不解析符号链接的真实路径 */
    // "allowUmdGlobalAccess": true,          /* 允许您从模块文件内部访问作为全局变量的 UMD 导出 */
    /* Source Map Options */
    // "sourceRoot": "",                      /* 指定调试器应定位TypeScript文件而不是相对源位置的位置 */
    // "mapRoot": "",                         /* 指定调试器定位Map文件的位置，而不是生成的位置 */
    // "inlineSourceMap": true,               /* 是否将Map文件内容嵌套到 JS 文件中，这会导致 JS 文件变大 */
    // "inlineSources": true,                 /* 是否将 .ts 文件的原始内容作为嵌入字符串包含在.map 文件中. */
    /* Experimental Options  实验选项*/
    "experimentalDecorators": true /* 是否启用对装饰器的实验性支持 */,
    "emitDecoratorMetadata": true /* 为装饰器启用对发出类型元数据的实验性支持 */,
    //"skipLibCheck": false,                   /* 是否跳过声明文件的类型检查，这可以在编译期间以牺牲类型系统准确性为代价来节省时间 */
    /* Advanced Options */
    "forceConsistentCasingInFileNames": true /*是否区分文件系统大小写规则 */
  },
  // 指定待编译的文件
  "include": [
    // **:任意目录,*:任意文件
    "src/**/*.ts",
    "src/**/*.d.ts"
  ],
  // 指定排除的文件
  "exclude": ["node_modules"]
}
